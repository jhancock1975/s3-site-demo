name: Deploy Changed Go Lambda Functions

on:
  push:
    branches:
      - main
    paths:
      - 'lambda/**'
  pull_request:
    branches:
      - main
    paths:
      - 'lambda/**'

permissions:
  contents: read

env:
  AWS_REGION: us-east-1
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Find changed Go lambda functions
        id: find_functions
        run: |
          git fetch --no-tags origin main
          functions=$(git diff --name-only origin/main $GITHUB_SHA \
            | grep '^lambda/' \
            | cut -d'/' -f2 \
            | uniq)
          echo "functions=$functions" >> $GITHUB_OUTPUT

      - name: Build & Deploy Lambdas
        run: |
          for fn in ${{ steps.find_functions.outputs.functions }}; do
            echo "=== λ/$fn ==="
            pushd "lambda/$fn"

            # Ensure modules are pulled
            if [ -f go.mod ]; then
              go mod tidy
              go mod download
            else
              go mod init "$fn"
              go mod tidy
            fi

            # 1) Build a static musl-linked binary inside Alpine
            echo "→ Building bootstrap (musl-static)"
            docker run --rm \
              -v "$PWD":/var/task \
              -w /var/task \
              golang:1.21-alpine3.18 \
              sh -euxc '
                apk add --no-cache musl-dev gcc
                CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
                  go build -tags netgo \
                    -ldflags="-s -w -linkmode external -extldflags \"-static\"" \
                    -o bootstrap *.go
              '

            # 2) Double-check it’s really static
            echo "→ Verifying bootstrap is static"
            if ldd bootstrap 2>&1 | grep -q "not a dynamic executable"; then
              echo "✅ bootstrap is fully static"
            else
              echo "❌ ERROR: bootstrap is still dynamically linked!" >&2
              ldd bootstrap
              exit 1
            fi

            # 3) Zip & publish
            zip -q "${fn}.zip" bootstrap
            ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/lambda_exec_role"

            if ! aws lambda get-function --function-name "$fn" >/dev/null 2>&1; then
              aws lambda create-function \
                --function-name "$fn" \
                --runtime provided.al2 \
                --role    "$ROLE_ARN" \
                --handler bootstrap \
                --zip-file fileb://"${fn}.zip"
            else
              aws lambda update-function-code \
                --function-name "$fn" \
                --zip-file fileb://"${fn}.zip"
            fi

            popd
          done
