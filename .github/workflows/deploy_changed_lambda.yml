name: Deploy Changed Go Lambda Functions

on:
  push:
    branches:
      - main
    paths:
      - 'lambda/**'
  pull_request:
    paths:
      - 'lambda/**'

permissions:
  contents: read

env:
  AWS_REGION: us-east-1
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Find changed Go lambda functions
        id: find_functions
        run: |
          echo "Comparing ${GITHUB_EVENT_BEFORE} → ${GITHUB_SHA}"
          git fetch --no-tags origin main

          functions=$(git diff --name-only origin/main $GITHUB_SHA |
            grep '^lambda/' |
            cut -f2 -d/ |
            uniq)

          echo "Functions to deploy: $functions"
          echo "::set-output name=functions::$functions"

      - name: Deploy functions
        run: |
          for fn in ${{ steps.find_functions.outputs.functions }}; do
            echo "=== Deploying lambda/$fn ==="
            pushd "lambda/$fn"

            if [ -f go.mod ]; then
              echo "→ go.mod found; running tidy & download"
              export GO111MODULE=on
              go mod tidy
              go mod download
            else
              echo "→ No go.mod: initializing module & running tidy"
              export GO111MODULE=on
              go mod init "$fn"
              go mod tidy
            fi

            echo "→ Building $fn (linux/amd64, static)"
            CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
              go build -mod=readonly -ldflags="-s -w" -o bootstrap *.go

            echo "→ Zipping $fn"
            zip -q "${fn}.zip" bootstrap

            echo "→ Publishing $fn to Lambda"
            ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/lambda_exec_role"
            if ! aws lambda get-function --function-name "$fn" >/dev/null 2>&1; then
              aws lambda create-function \
                --function-name "$fn" \
                --runtime provided.al2 \
                --role "$ROLE_ARN" \
                --handler bootstrap \
                --zip-file fileb://"${fn}.zip"
            else
              aws lambda update-function-code \
                --function-name "$fn" \
                --zip-file fileb://"${fn}.zip"
            fi

            popd
          done
