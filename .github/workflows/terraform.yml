name: Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            ${{ secrets.AWS_REGION }}
      CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID:    ${{ secrets.CLOUDFLARE_ZONE_ID }}
      CLOUDFLARE_RECORD_ID:  ${{ secrets.CLOUDFLARE_RECORD_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build & zip Lambda
        run: |
          cd lambda
          go mod tidy
          GOOS=linux GOARCH=amd64 go build -o function main.go
          zip -j function.zip function
          mv function.zip ../terraform/function.zip

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Import existing Cloudflare record
        if: env.CLOUDFLARE_RECORD_ID != ''
        working-directory: terraform
        run: |
          terraform import cloudflare_record.site_cname \
            ${CLOUDFLARE_ZONE_ID}/${CLOUDFLARE_RECORD_ID} || true

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="aws_region=$AWS_REGION" \
            -var="s3_bucket_name=${{ secrets.S3_BUCKET_NAME }}" \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="cloudflare_api_token=$CLOUDFLARE_API_TOKEN" \
            -var="cloudflare_zone_id=$CLOUDFLARE_ZONE_ID" \
            -var="cloudflare_record_id=$CLOUDFLARE_RECORD_ID"
