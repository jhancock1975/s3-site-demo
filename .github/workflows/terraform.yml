# .github/workflows/deploy.yml
name: Build & Deploy

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    # everything under "run:" defaults into the terraform/ folder
    defaults:
      run:
        working-directory: terraform

    env:
      TF_INPUT: false

      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            ${{ secrets.AWS_REGION }}

      CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID:    ${{ secrets.CLOUDFLARE_ZONE_ID }}
      CLOUDFLARE_RECORD_ID:  ${{ secrets.CLOUDFLARE_RECORD_ID }}

      TF_VAR_s3_bucket_name:     ${{ secrets.S3_BUCKET_NAME }}
      TF_VAR_domain_name:        ${{ secrets.DOMAIN_NAME }}
      TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build & zip Lambda
        # override the default to point at lambda/
        working-directory: lambda
        run: |
          go mod tidy
          GOOS=linux GOARCH=amd64 go build -o function main.go
          zip -j function.zip function
          # move it into the terraform/ folder for Terraform to pick up
          mv function.zip ../terraform/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: Init, Import & Apply
        run: |
          terraform init
          terraform import cloudflare_record.site_cname \
            ${CLOUDFLARE_ZONE_ID}/${CLOUDFLARE_RECORD_ID} || true
          terraform apply -auto-approve
